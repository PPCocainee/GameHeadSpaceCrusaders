//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Movement "",
            ""id"": ""2ea4b4ca-206d-4a5e-8df6-9c69ccea9d36"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4385efb1-c8f0-49a5-b7db-1bebd25c274c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6e543a90-9916-4b92-9448-22aa84cb2d33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e7816c2f-697c-4653-b578-b5eac0f80035"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2a4237cb-b8c6-43f6-9cf3-017caf8c2019"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64a36008-fe64-42be-971b-5391e3ca1710"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5aa42bac-443a-4dfd-bf31-bbdff2b8cc22"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db898585-80bf-4f53-bef7-23ae99ee39e2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys "",
                    ""id"": ""9fdcb1ff-9581-4974-b795-03c1c7b3cd9d"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""95ecf2c7-0903-402e-a4d1-6ddbd1b971bd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""791c1ff3-6c2d-45f7-bfca-168391320de2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e04c5d1-c49f-4d81-af6a-60bebafa8166"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1a31896f-40ec-42c7-aa69-80e1db3b3258"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Analog "",
                    ""id"": ""1b540f10-1629-49c9-9c90-cf3e2c3b9833"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""979cd3c3-6207-4ffd-93a7-32d125a94e32"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1f070c3f-c7b2-4e66-afe6-1938c2785177"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2b25a02e-0437-4703-a167-c438d0b4e1f2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88b79a9f-c300-4eda-ad9f-79be432fac03"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""DPAD"",
                    ""id"": ""f4380dee-a399-4091-a4b5-e0ed92cfc750"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1f970be2-4f78-4c4e-ae18-6548c8dab20c"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a515fa5c-5b2d-4e16-8dff-6a670d737c2b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3b109e44-1af0-4f68-8538-416e9b759cee"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3f486e92-a123-4018-84a4-1968b3178eae"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5ad9261d-e213-4af7-a8c8-63634965cdc7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9c2babd-ad40-4185-8844-8008cfdcc94b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hack"",
            ""id"": ""35bc95a1-56b9-4745-96d3-292e36a6912a"",
            ""actions"": [
                {
                    ""name"": ""Hacking"",
                    ""type"": ""Button"",
                    ""id"": ""fb899ce7-4b22-4621-b62a-07ffc697e699"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d904979d-13a0-46e4-be64-1dd97b336833"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hacking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0894d7a6-a9c9-4d5b-9c0f-046fe183526c"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Hacking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Swap "",
            ""id"": ""5111499d-f980-443b-b12b-330b7f9c8e26"",
            ""actions"": [
                {
                    ""name"": ""Swap"",
                    ""type"": ""Button"",
                    ""id"": ""9fd5e4ca-9666-4d35-aae1-9ba6067f0d7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7aa121a-182a-468a-84d3-2a0650d49c3d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd10c82c-7398-4da5-8475-829c4975b98e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkillCheckAction"",
            ""id"": ""3548fd2b-8c00-4b96-8b16-3cbdf0509188"",
            ""actions"": [
                {
                    ""name"": ""SkillCheckAction"",
                    ""type"": ""Button"",
                    ""id"": ""b5e55ec9-5b1f-4628-a6c2-abfb5342b3ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""932102f4-3b78-468d-9d12-4e41ed8e364a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SkillCheckAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27fe7b74-b822-444e-a0f2-d2711d3f1789"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""SkillCheckAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""cf1de92c-14d6-4883-991d-42168d24905b"",
            ""actions"": [
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""fd7d715e-6bc1-4594-aa7b-de5f8833e3bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1bbecb3b-2f21-4238-a419-ad41e29ecba4"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6e4fa3b-d4cb-4c38-8ce9-10f12fb0ec84"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard "",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard "",
            ""bindingGroup"": ""Keyboard "",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Movement 
        m_Movement = asset.FindActionMap("Movement ", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // Hack
        m_Hack = asset.FindActionMap("Hack", throwIfNotFound: true);
        m_Hack_Hacking = m_Hack.FindAction("Hacking", throwIfNotFound: true);
        // Swap 
        m_Swap = asset.FindActionMap("Swap ", throwIfNotFound: true);
        m_Swap_Swap = m_Swap.FindAction("Swap", throwIfNotFound: true);
        // SkillCheckAction
        m_SkillCheckAction = asset.FindActionMap("SkillCheckAction", throwIfNotFound: true);
        m_SkillCheckAction_SkillCheckAction = m_SkillCheckAction.FindAction("SkillCheckAction", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Interaction = m_Interaction.FindAction("Interaction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement 
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Hack
    private readonly InputActionMap m_Hack;
    private IHackActions m_HackActionsCallbackInterface;
    private readonly InputAction m_Hack_Hacking;
    public struct HackActions
    {
        private @Controls m_Wrapper;
        public HackActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hacking => m_Wrapper.m_Hack_Hacking;
        public InputActionMap Get() { return m_Wrapper.m_Hack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HackActions set) { return set.Get(); }
        public void SetCallbacks(IHackActions instance)
        {
            if (m_Wrapper.m_HackActionsCallbackInterface != null)
            {
                @Hacking.started -= m_Wrapper.m_HackActionsCallbackInterface.OnHacking;
                @Hacking.performed -= m_Wrapper.m_HackActionsCallbackInterface.OnHacking;
                @Hacking.canceled -= m_Wrapper.m_HackActionsCallbackInterface.OnHacking;
            }
            m_Wrapper.m_HackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Hacking.started += instance.OnHacking;
                @Hacking.performed += instance.OnHacking;
                @Hacking.canceled += instance.OnHacking;
            }
        }
    }
    public HackActions @Hack => new HackActions(this);

    // Swap 
    private readonly InputActionMap m_Swap;
    private ISwapActions m_SwapActionsCallbackInterface;
    private readonly InputAction m_Swap_Swap;
    public struct SwapActions
    {
        private @Controls m_Wrapper;
        public SwapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swap => m_Wrapper.m_Swap_Swap;
        public InputActionMap Get() { return m_Wrapper.m_Swap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwapActions set) { return set.Get(); }
        public void SetCallbacks(ISwapActions instance)
        {
            if (m_Wrapper.m_SwapActionsCallbackInterface != null)
            {
                @Swap.started -= m_Wrapper.m_SwapActionsCallbackInterface.OnSwap;
                @Swap.performed -= m_Wrapper.m_SwapActionsCallbackInterface.OnSwap;
                @Swap.canceled -= m_Wrapper.m_SwapActionsCallbackInterface.OnSwap;
            }
            m_Wrapper.m_SwapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swap.started += instance.OnSwap;
                @Swap.performed += instance.OnSwap;
                @Swap.canceled += instance.OnSwap;
            }
        }
    }
    public SwapActions @Swap => new SwapActions(this);

    // SkillCheckAction
    private readonly InputActionMap m_SkillCheckAction;
    private ISkillCheckActionActions m_SkillCheckActionActionsCallbackInterface;
    private readonly InputAction m_SkillCheckAction_SkillCheckAction;
    public struct SkillCheckActionActions
    {
        private @Controls m_Wrapper;
        public SkillCheckActionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkillCheckAction => m_Wrapper.m_SkillCheckAction_SkillCheckAction;
        public InputActionMap Get() { return m_Wrapper.m_SkillCheckAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillCheckActionActions set) { return set.Get(); }
        public void SetCallbacks(ISkillCheckActionActions instance)
        {
            if (m_Wrapper.m_SkillCheckActionActionsCallbackInterface != null)
            {
                @SkillCheckAction.started -= m_Wrapper.m_SkillCheckActionActionsCallbackInterface.OnSkillCheckAction;
                @SkillCheckAction.performed -= m_Wrapper.m_SkillCheckActionActionsCallbackInterface.OnSkillCheckAction;
                @SkillCheckAction.canceled -= m_Wrapper.m_SkillCheckActionActionsCallbackInterface.OnSkillCheckAction;
            }
            m_Wrapper.m_SkillCheckActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SkillCheckAction.started += instance.OnSkillCheckAction;
                @SkillCheckAction.performed += instance.OnSkillCheckAction;
                @SkillCheckAction.canceled += instance.OnSkillCheckAction;
            }
        }
    }
    public SkillCheckActionActions @SkillCheckAction => new SkillCheckActionActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Interaction;
    public struct InteractionActions
    {
        private @Controls m_Wrapper;
        public InteractionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interaction => m_Wrapper.m_Interaction_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Interaction.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteraction;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard ");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IHackActions
    {
        void OnHacking(InputAction.CallbackContext context);
    }
    public interface ISwapActions
    {
        void OnSwap(InputAction.CallbackContext context);
    }
    public interface ISkillCheckActionActions
    {
        void OnSkillCheckAction(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnInteraction(InputAction.CallbackContext context);
    }
}
